package com.fit.burpLoad;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.security.interfaces.RSAPrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

/**
 * @className: SignUtils
 * @description:
 * @author: Aim
 * @date: 2023/6/25
 **/
public class SignUtils {

    public static String n = "772466485993532616265602004787593990571998354762769517556824947462364733846988896764791786418284048308408035898123800088385145599914482866982121337242267111996730589833008965586904619624210600143815034555107626281306790690247380277401223658213686836260051740513369525229945146545746232288644834011082272373923840674183841152721282934896147636659685196110193170859036230613942473057350558696079781329724723538612065451271117946653171891463701206005132474249143377280956637274812017722966962038177658826682928177419967120615723412715280627140352666513761887655683881127941062521608622150057375302773817128043341551104335925307524362463158532014345920401529131689972511711145366384313357331219918007902162272947810092434401421074436297130543420857679173250879221703239461167245128718027210585470097741338476167664231386224393829173753597329684981549442031004886309176804274536524421269896699613148427017011648805968328213879561704664823249805341430850708344955922886822191380206543393525391519722222586339612770531074577303349625790208047047035933996137831086461496793235410445769659982355567180073509405077094784975713575937671560399734544873967339281900443458904052345698752817504449813508664835247206727493828740500751727305948870197";
    public static String d = "174973907633458835290948040970319556739571777415098547204343597434713283701703620435377482481337667228257584157157755349071173328512603539380038623241244720960548478051650488947275570720683070008314908951745925387887747498309693153760794134705314266510222745745471574866694168187002804802248082165715799218623058956135604649467437404344619248153150536891463106663448019339670354342377115886343658602617811632065796597709992003266343237084069218962512650567290743179208710809841530785624068105905783683752812438680431083289445871214098004331881766550144120454836614665674124130388635363498508268148943577914817665229458767012826384170293442481353885513942286386871422229921740675582649721394004737713146579092336428734122223073166081868987285302826609579340630764882890999436799814488695761863240374337775451144202336101045005062769951606330931316728620859403340949196048544016831331215882019606910236181120045619447482208762438586388152397180820131522205873078063910211185803468590525972907163613199413004903986557077623758471248380271780715344796370488885220077075150724843009236460156571650622249128893865976236126703679474153844433204143676260363864471833141144466790653534160506805002383442253160746350344972938442854944399195933";
    private static final byte[] encryption_key = "burpr0x!".getBytes();

    public static String getSign(String dover) throws UnsupportedEncodingException {
        return getSign(n, dover.getBytes("UTF-8"), "SHA256withRSA");
    }


    public static String getSign(String pri, byte[] data, String method) {
        try {
            Signature sign = Signature.getInstance(method);
            sign.initSign(getPriKeyByHex(pri));
            sign.update(data);
            byte[] signature = sign.sign();
            return Base64.getEncoder().encodeToString(signature);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static RSAPrivateKey getPriKeyByHex(String hexStr) {
        BigInteger hex = new BigInteger(hexStr, 16);
        byte[] priData = hex.toByteArray();
        try {
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(priData);
            return (RSAPrivateKey) keyFactory.generatePrivate(pkcs8EncodedKeySpec);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * DES加密
     */
    public static byte[] encrypt(byte[] arrayOfByte) {
        return crypt(arrayOfByte, true);
    }

    /**
     * DES解密
     */
    public static byte[] decrypt(byte[] arrayOfByte) {
        return crypt(arrayOfByte, false);
    }

    /**
     * DES 基类
     * @param data 数据
     * @param isEn 是否加密: true-加密,false-解密
     * @return
     */
    private static byte[] crypt(byte[] data, boolean isEn) {
        try {
            SecretKeySpec localSecretKeySpec = new SecretKeySpec(encryption_key, "DES");
            Cipher localCipher = Cipher.getInstance("DES");
            localCipher.init(isEn ? 1 : 2, localSecretKeySpec);
            return localCipher.doFinal(data);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }
}
